# Task ID: 2
# Title: Implement Core Encryption/Decryption Module
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create the core encryption and decryption functionality using AES encryption from pycryptodome.
# Details:
Create a module `eval_crypt/crypto.py` that implements the encryption and decryption functionality:

```python
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import os
import json
from base64 import b64decode, b64encode
from pathlib import Path
from typing import Union, List


def create_or_read_secret_key(key_path: Union[str, Path] = "anti-pretraining.sk") -> bytes:
    """Create a new secret key if it doesn't exist, or read the existing one."""
    key_path = Path(key_path)
    if not key_path.exists():
        key_path.parent.mkdir(parents=True, exist_ok=True)
        with open(key_path, "wb") as f:
            sk = get_random_bytes(16)
            f.write(sk)
        return sk
    with open(key_path, "rb") as f:
        return f.read()


def encrypt_file(file_path: Union[str, Path], secret_key: bytes) -> None:
    """Encrypt a file using AES encryption in CTR mode."""
    file_path = Path(file_path)
    if not file_path.exists():
        raise FileNotFoundError(f"File {file_path} not found")
        
    with open(file_path, "rb") as f:
        plaintext = f.read()

    cipher = AES.new(secret_key, AES.MODE_CTR)
    ciphertext = cipher.encrypt(plaintext)
    nonce = b64encode(cipher.nonce).decode("utf-8")
    ct = b64encode(ciphertext).decode("utf-8")
    result = json.dumps({"nonce": nonce, "ciphertext": ct})
    
    with open(str(file_path) + ".enc", "w") as f:
        f.write(result)
    
    # Remove the original file after encryption
    os.remove(file_path)


def decrypt_file(file_path: Union[str, Path], secret_key: bytes) -> None:
    """Decrypt a file that was encrypted using encrypt_file."""
    file_path = Path(file_path)
    enc_path = Path(str(file_path) + ".enc")
    
    if not enc_path.exists():
        raise FileNotFoundError(f"Encrypted file {enc_path} not found")
    
    with open(enc_path, "r") as f:
        encrypted_data = json.loads(f.read())
    
    try:
        nonce = b64decode(encrypted_data["nonce"])
        ciphertext = b64decode(encrypted_data["ciphertext"])
        cipher = AES.new(secret_key, AES.MODE_CTR, nonce=nonce)
        plaintext = cipher.decrypt(ciphertext)
    except (ValueError, KeyError) as e:
        raise ValueError(f"Decryption failed: {e}")
    
    with open(file_path, "wb") as f:
        f.write(plaintext)
    
    # Remove the encrypted file after decryption
    os.remove(enc_path)


def get_sensitive_files(gitattributes_path: Union[str, Path] = ".gitattributes") -> List[str]:
    """Get the list of sensitive files from .gitattributes."""
    gitattributes_path = Path(gitattributes_path)
    if not gitattributes_path.exists():
        return []
    
    sensitive_files = []
    with open(gitattributes_path, "r") as f:
        for line in f:
            if "filter=eval-crypt" in line:
                file_pattern = line.split()[0]
                sensitive_files.append(file_pattern)
    
    return sensitive_files
```

# Test Strategy:
Create unit tests for each function in the crypto module. Test creating and reading secret keys, encrypting and decrypting files with various content types (text, binary), and handling edge cases like empty files or non-existent files. Verify that the original file is properly removed after encryption and the encrypted file is removed after decryption.
