# Task ID: 1
# Title: Setup Project Structure and Dependencies
# Status: done
# Dependencies: None
# Priority: high
# Description: Initialize the project structure and create the pyproject.toml file with necessary dependencies for the eval-crypt package.
# Details:
Create a standard Python package structure with the following components:
1. Create directory structure:
   - eval_crypt/ (main package)
   - tests/
   - docs/
2. Create pyproject.toml with the following dependencies:
   - pycryptodome (for AES encryption)
   - click (for CLI implementation)
   - pre-commit (for git hooks)
3. Setup basic package metadata:
```toml
[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "eval-crypt"
version = "0.1.0"
description = "A tool to encrypt sensitive AI safety evaluation files in Git repositories"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
dependencies = [
    "click>=8.0.0",
    "pycryptodome>=3.15.0",
    "pre-commit>=2.20.0",
]

[project.scripts]
eval-crypt = "eval_crypt.cli:main"
```
4. Create a basic README.md with installation and usage instructions
5. Note that the CLI will only manage the list of files to be encrypted/decrypted, while the actual encryption/decryption operations will be handled automatically by git hooks

# Test Strategy:
Verify the package structure is correct and that the package can be installed with pip install -e . in development mode. Ensure all dependencies are correctly specified and the package metadata is accurate. Test that the CLI correctly manages the list of files to be encrypted/decrypted and that the git hooks are properly configured.

# Subtasks:
## 2. Create pyproject.toml with Dependencies [done]
### Dependencies: 1.1
### Description: Create the pyproject.toml file with necessary dependencies for the package.
### Details:
Create pyproject.toml in the root directory with the following content:
[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "eval-crypt"
version = "0.1.0"
description = "A tool to encrypt sensitive AI safety evaluation files in Git repositories"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
dependencies = [
    "click>=8.0.0",
    "pycryptodome>=3.15.0",
    "pre-commit>=2.20.0",
]

[project.scripts]
eval-crypt = "eval_crypt.cli:main"

## 3. Create Basic README.md [done]
### Dependencies: 1.2
### Description: Create a comprehensive README.md file with installation and usage instructions for the package.
### Details:
Create README.md in the root directory with the following sections:
1. Project title and brief description
2. Installation instructions (pip install, development setup)
3. Basic usage examples
4. Features overview
5. License information

Example content:
# eval-crypt

A tool to encrypt sensitive AI safety evaluation files in Git repositories.

## Installation

```bash
pip install eval-crypt
```

For development:
```bash
git clone https://github.com/username/eval-crypt.git
cd eval-crypt
pip install -e .
```

## Usage

```bash
# Add a file to be automatically encrypted/decrypted by git hooks
eval-crypt add path/to/sensitive/file.txt

# Remove a file from automatic encryption/decryption
eval-crypt remove path/to/sensitive/file.txt

# List all files being managed for encryption/decryption
eval-crypt list
```

## Features

- Secure AES encryption for sensitive files
- Simple CLI interface for managing encrypted files
- Automatic encryption/decryption via git hooks
- Seamless integration with your Git workflow

## License

MIT

## 4. Create Basic CLI Module Structure [done]
### Dependencies: 1.1, 1.2
### Description: Create the initial CLI module structure in the eval_crypt package to enable file management for automatic encryption/decryption via git hooks.
### Details:
Create the cli.py file in the eval_crypt directory with a revised CLI structure using Click:
```python
import click

@click.group()
def main():
    """eval-crypt: A tool to manage sensitive AI safety evaluation files."""
    pass

@main.command()
@click.argument('file_path', type=click.Path(exists=True))
def add(file_path):
    """Add a file to the managed list for automatic encryption."""
    click.echo(f"Adding {file_path} to managed files")
    # Logic to add file to managed list will be implemented later

@main.command()
@click.argument('file_path', type=click.Path(exists=True))
def remove(file_path):
    """Remove a file from the managed list to stop automatic encryption."""
    click.echo(f"Removing {file_path} from managed files")
    # Logic to remove file from managed list will be implemented later

@main.command()
def list():
    """List all files currently being managed for encryption."""
    click.echo("Listing all managed files:")
    # Logic to display managed files will be implemented later

if __name__ == '__main__':
    main()
```

Note: This CLI design aligns with the git hooks approach where files are automatically encrypted/decrypted by git hooks rather than through direct user commands.

## 5. Document Git Hooks Workflow [done]
### Dependencies: 1.3
### Description: Document the workflow for how git hooks will automatically handle encryption/decryption of managed files.
### Details:
Create a document or section in the README.md that explains:

1. How the pre-commit hook will automatically encrypt sensitive files before they are committed
2. How the post-checkout hook will automatically decrypt files after checkout
3. How the post-merge hook will handle decryption after merging
4. The overall workflow from a user perspective

Example content for README.md section:

## How It Works

eval-crypt uses git hooks to automatically encrypt and decrypt sensitive files:

1. **Adding files to management**: When you run `eval-crypt add <file>`, the file path is added to a configuration file
2. **Pre-commit hook**: Before committing, all managed files are automatically encrypted
3. **Post-checkout hook**: After checkout, all managed files are automatically decrypted
4. **Post-merge hook**: After merging, all managed files are automatically decrypted

This means you can work with the unencrypted files locally, but they will always be encrypted in the repository.

## 1. Create Directory Structure [done]
### Dependencies: None
### Description: Set up the initial directory structure for the eval-crypt package following standard Python package conventions.
### Details:
Create the following directory structure:
- eval_crypt/ (main package)
  - __init__.py (empty file to mark as package)
  - cli.py (placeholder for CLI implementation)
- tests/ (for unit tests)
  - __init__.py (empty file)
- docs/ (for documentation)
  - index.md (placeholder for main documentation)

